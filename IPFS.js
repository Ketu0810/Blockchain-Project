import { createContext, useContext, useState } from "react";
const { ThirdwebStorage } = require("@thirdweb-dev/storage");

const IPFSContext = createContext({});

export function IPFSContextProvider(props) {
  const [IPFSuploading, setIPFSuploading] = useState(false);
  const [IPFSerror, setIPFSerror] = useState(null);

  async function IPFSupload(data, file) {
    try {
      setIPFSerror(null);
      setIPFSuploading(true);
      const client = new ThirdwebStorage();
      console.log(new File([file], file.name, { type: file.type }))
      const metadata = await client.upload({
        name: data.name,
        description: data.description,
        image: new File([file], file.name, { type: file.type })
      });
      console.log(client.resolveScheme(metadata));
      return client.resolveScheme(metadata);
    } catch (error) {
      console.error(error);
      setIPFSerror(error);
    } finally {
      setIPFSuploading(false);
    }
  }

  async function invoiceUpload(data) {
    try {
      setIPFSerror(null);
      setIPFSuploading(true);
      const client = new ThirdwebStorage();
      const metadata = await client.upload({
        name: data.name,
        description: "Invoice generated by NetRent",
        details: {
          orderDate: data.today,
          totalCost: data.totalCost
        },
      });

      console.log(client.resolveScheme(metadata));
      return client.resolveScheme(metadata);
    } catch (error) {
      console.error(error);
      setIPFSerror(error);
    } finally {
      setIPFSuploading(false);
    }
  }

  return (
    <IPFSContext.Provider value={{ IPFSuploading, IPFSerror, IPFSupload, invoiceUpload }}>
      {props.children}
    </IPFSContext.Provider>
  );
}

export function useIPFS() {
  return useContext(IPFSContext);
}
